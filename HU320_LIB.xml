<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HU320_LIB</name>
    </assembly>
    <members>
        <member name="M:USBInterface.HIDInterface.#ctor(System.UInt16,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Creates an object to handle read/write functionality for a USB HID device
            Uses one filestream for each of read/write to allow for a write to occur during a blocking
            asnychronous read
            </summary>
            <param name="VID">The vendor ID of the USB device to connect to</param>
            <param name="PID">The product ID of the USB device to connect to</param>
            <param name="serialNumber">The serial number of the USB device to connect to</param>
            <param name="useAsyncReads">True - Read the device and generate events on data being available</param>
        </member>
        <member name="M:USBInterface.HIDInterface.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an object to handle read/write functionality for a USB HID device
            Uses one filestream for each of read/write to allow for a write to occur during a blocking
            asnychronous read
            </summary>
            <param name="devicePath">The USB device path - from getConnectedDevices</param>
            <param name="useAsyncReads">True - Read the device and generate events on data being available</param>
        </member>
        <member name="M:USBInterface.HIDInterface.read">
            <summary>
            This read function is for normal synchronous reads
            </summary>
            <returns></returns>
        </member>
        <member name="M:HU320.HU320.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a new instance of the HU320 device.
            </summary>
            <param name="VID">USB Vendor ID - eg 0x06ba</param>
            <param name="PID">USB Product ID - eg 0x000a</param>
            <param name="serialNumber">Serial number of the target hardware</param>
        </member>
        <member name="M:HU320.HU320.#ctor(System.UInt16)">
            <summary>
            Creates a new instance of the HU320 device. Assumes the default VID/PID
            </summary>
            <param name="serialNumber"></param>
        </member>
        <member name="M:HU320.HU320.#ctor">
            <summary>
            Used if only one device is connected, finds the serial number automatically
            Throws an exception if more than one device is found
            </summary>
        </member>
        <member name="M:HU320.HU320.usbI_dataReceived(System.Byte[])">
            <summary>
            This method handles events from the USB interface class, this will split into more events for UART SPI etc
            If the message is not an async read, the eventWaitHandle (waitReply) will be signalled, otherwise and event will be triggered
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:HU320.HU320.getConnectedDevices(System.UInt16,System.UInt16)">
            <summary>
            Queries the operating system for the serial numbers of the devices conneced with the specified VID/PID 
            </summary>
            <param name="VID">VID to search for</param>
            <param name="PID">PID to search for</param>
            <returns>Array of the connected device's serial numbers</returns>
        </member>
        <member name="M:HU320.HU320.getConnectedDevices">
            <summary>
            Queries the operating system for the serial numbers of the devices conneced with the default VID/PID
            </summary>
            <returns>Array of the connected device's serial numbers</returns>
        </member>
        <member name="M:HU320.HU320.close">
            <summary>
            Stops the flow of HID reports and disconnects the device
            </summary>
        </member>
        <member name="M:HU320.HU320.msgSend(HU320.HU320.section,System.Byte,System.Byte[])">
            <summary>
            The message header includes the datalength, which allows the message to span
            more than one HID report. Useful for long UART/SPI transfers
            </summary>
        </member>
        <member name="M:HU320.HU320.msgSend(HU320.HU320.section,System.Byte)">
            <summary>
            Use this method if no data packet is required
            </summary>
            <param name="s">Firmware section to access</param>
            <param name="instruction">Instruction to execute</param>
        </member>
        <member name="M:HU320.HU320.UART_setup(HU320.HU320.UART_baudRate,HU320.HU320.UART_stopBits)">
            <summary>
            Sets up the UART, causes the functions of the pins PD2/PD3 to be overridden by the UART
            </summary>
            <param name="rate">Baudrate to be used</param>
            <param name="stopbits">Number of stop bits to be used (1 or 2)</param>
        </member>
        <member name="M:HU320.HU320.UART_setup(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            (Advanced) Sets up the UART. Causes the functions of the pins PD2/PD3 to be overridden by the UART
            Sets the registers directly, so all features can be accessed
            </summary>
        </member>
        <member name="M:HU320.HU320.UART_disable">
            <summary>
            Disables the UART. Returns the pin functions to their normal operation
            </summary>
        </member>
        <member name="M:HU320.HU320.UART_read(System.Int32)">
            <summary>
            Reads a number of bytes from the UART RX buffer
            If more bytes are requested than available, all available bytes are returned
            </summary>
            <param name="numBytesToRead">The number of bytes to be read</param>
            <returns>Read data</returns>
        </member>
        <member name="M:HU320.HU320.UART_setBaudRate(HU320.HU320.UART_baudRate)">
            <summary>
            Sets the baudrate to be used by the UART block
            </summary>
            <param name="rate">Baudrate - enumerated type</param>
        </member>
        <member name="M:HU320.HU320.SPI_setup(System.Byte,System.Byte)">
            <summary>
            (Advanced) Sets up SPI controller.
            Allows access to all functions, see Atmel AT90USB162 datasheet for details
            Data for all SPI replies will come through the SPI_DataReceived event
            </summary>
            <param name="SPCR">SPI Control register</param>
            <param name="SPSR">SPI Status register</param>
        </member>
        <member name="M:HU320.HU320.SPI_setup(HU320.HU320.SPI_masterSlave,HU320.HU320.SPI_mode,HU320.HU320.SPI_dataOrder,HU320.HU320.SPI_baudRate)">
            <summary>
            Sets up the SPI controller using simple enumerated types
            </summary>
            <param name="MS">Select master or slave SPI mode</param>
            <param name="mode">Selects clock phase and polarity based on standard SPI mode types</param>
            <param name="order">Data order, MSB or LSB first</param>
            <param name="rate">Data clock rate to be used (no effect in slave mode)</param>
        </member>
        <member name="M:HU320.HU320.SPI_transaction(System.Byte[],System.Byte[]@,System.Char,System.Byte)">
            <summary>
            Performs an SPI read/write operation when configured as master
            SPI_Setup() must be called prior to using this method
            </summary>
            <param name="inData">Byte array to send, right padded with the number of bytes to read</param>
            <param name="outData">All bytes shifted in during SPI transaction</param>
            <param name="port">Port name (B,C,D) which includes the correct chip select pin</param>
            <param name="chipSelectBitMask">Bit mask of chip select pin to drive during this transaction</param>
        </member>
        <member name="M:HU320.HU320.I2C_setup">
            <summary>
            Enables the I2C transceiver
            </summary>
        </member>
        <member name="M:HU320.HU320.I2C_busScan(System.Byte[]@)">
            <summary>
            Scans through all possible I2C addresses, and checks for an ACK at each address
            </summary>
            <param name="validAddresses">A list of addresses of I2C devices detected on the bus</param>
        </member>
        <member name="M:HU320.HU320.I2C_write(System.Byte[])">
            <summary>
            Performs a one-step write operation including start and stop instructions. all device addressing must be included in the byte array
            </summary>
            <param name="data">bytes to write to the bus, including address</param>
        </member>
        <member name="M:HU320.HU320.I2C_write(System.Byte,System.UInt16,System.Byte[])">
            <summary>
            Writes data to the I2C bus using a 7bit device address and a 16bit internal address
            </summary>
            <param name="deviceAddress">7bit address of the I2C device</param>
            <param name="internalAddress">internal address to write to</param>
            <param name="data">Data bytes to write</param>
        </member>
        <member name="M:HU320.HU320.I2C_write(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Writes data to the I2C bus using a 7bit device address and an 8bit internal address
            </summary>
            <param name="deviceAddress">7bit address of the I2C device</param>
            <param name="internalAddress">internal address to write to</param>
            <param name="data">Data bytes to write</param>
        </member>
        <member name="M:HU320.HU320.I2C_read(System.Byte[],System.Int32,System.Byte[]@)">
            <summary>
            Flexible I2C read, allows an arbitrary number of bytes to precede the repeated start (allows 8 or 16bit addressing)
            </summary>
            <param name="writeData">Address / control bytes. The last byte in this array forms the second address (normally sent with the read flag set). This byte is sent after the repeated start command</param>
            <param name="numBytesToRead">Number of bytes to read from the specified slave</param>
            <param name="outData">The data returned by the slave device</param>
        </member>
        <member name="M:HU320.HU320.I2C_read(System.Byte,System.UInt16,System.Int32,System.Byte[]@)">
            <summary>
            Quick I2C read using a 16bit internal address
            </summary>
            <param name="deviceAddress">7bit address of the I2C device</param>
            <param name="internalAddress">internal address to read bytes from</param>
            <param name="numBytesToRead">The number of bytes to read from the I2C device</param>
            <param name="outData">The data bytes read from the I2C device</param>
        </member>
        <member name="M:HU320.HU320.I2C_read(System.Byte,System.Byte,System.Int32,System.Byte[]@)">
            <summary>
            Quick I2C read using an 8bit internal address
            </summary>
            <param name="deviceAddress">7bit address of the I2C device</param>
            <param name="internalAddress">internal address to read bytes from</param>
            <param name="numBytesToRead">The number of bytes to read from the I2C device</param>
            <param name="outData">The data bytes read from the I2C device</param>
        </member>
        <member name="M:HU320.HU320.I2C_sendStart">
            <summary>
            Sends an I2C start condition. If the lines cannot be driven correctly, an error is generated. 
            Also clears all existing errors
            </summary>
        </member>
        <member name="M:HU320.HU320.I2C_sendStop">
            <summary>
            Sends an I2C stop condition
            </summary>
        </member>
        <member name="M:HU320.HU320.I2C_writeData(System.Byte[])">
            <summary>
            writes the specified bytes to the bus, must be preceded by a start condition
            </summary>
            <param name="data">Bytes to be written</param>
        </member>
        <member name="M:HU320.HU320.I2C_readData(System.Byte,System.Byte[]@)">
            <summary>
            Attempts to read the specified number of bytes from the bus.
            </summary>
            <param name="numBytes">Number of bytes to read</param>
            <param name="outData">data read from the bus</param>
        </member>
        <member name="M:HU320.HU320.I2C_checkError">
            <summary>
            Reads the error code held in memory. Each time a new operation occurs, the error code is overwritten
            Calling this method clears the error code to 0 (no error)
            </summary>
            <returns>Enumerated type of the error encountered</returns>
        </member>
        <member name="M:HU320.HU320.GPIO_setDirPort(System.Char,System.Byte,System.Byte)">
            <summary>
            Sets the data direction of all pins in the specified port, covered by the mask
            </summary>
            <param name="port">Port ID letter (B, C, D)</param>
            <param name="direction">bit mask, 1 - output, 0 - input</param>
            <param name="mask">bit mask, 1 - pin is changed, 0 - pin is unchanged</param>
        </member>
        <member name="M:HU320.HU320.GPIO_writePort(System.Char,System.Byte,System.Byte)">
            <summary>
            Sets or clears the specified pins based on the mask
            Also used to configure internal pullup resistors when pins are set as input
            </summary>
            <param name="port">Port ID letter (B, C, D)</param>
            <param name="portValue">bit mask, 1 - high, 0 - low</param>
            <param name="mask">bit mask, 1 - pin is changed, 0 - pin is unchanged</param>
        </member>
        <member name="M:HU320.HU320.GPIO_readPort(System.Char,System.Byte@)">
            <summary>
            Reads the state of all pins in the port
            </summary>
            <param name="port">Port ID letter (B, C, D)</param>
            <param name="portValue">The value read from the specified port</param>
        </member>
        <member name="M:HU320.HU320.timer_setupPulseCounting(System.Boolean)">
            <summary>
            Initialises the timer to allow pulse counting. Each time the specific edge is detected on the T1 pin (PB4), 
            the value of the 16bit counter register is incremented. The value of the counter register can be found using
            timer_getTimerValue()
            </summary>
            <param name="useFallingEdge"></param>
        </member>
        <member name="M:HU320.HU320.timer_setupPWM(System.Int32,System.Double)">
            <summary>
            Generates a PWM signal on PC5 with the specified frequency and duty cycle
            </summary>
            <param name="frequency">The output frequency in Hz of the PWM signal value must be in the range 125-160000 Hz</param>
            <param name="dutyCycle_percent">Duty cycle to be applied (0-100%)</param>
        </member>
        <member name="M:HU320.HU320.timer_setServoPosition(System.UInt16,System.UInt16)">
            <summary>
            Provides an interface for standard hobby/RC servos
            </summary>
            <param name="period_us">Period of the pulse train (normally 10000us)</param>
            <param name="pulse_us">Pulse used to set the servo angle, normally 1000-2000us full scale</param>
        </member>
        <member name="M:HU320.HU320.timer_disable">
            <summary>
            Disables all functions of the timer and disconnects output compare pins
            </summary>
        </member>
        <member name="M:HU320.HU320.timer_setControlRegisters(System.Byte,System.Byte,System.Byte)">
            <summary>
            Advanced - Allows all functions of the timer subsystem to be configured. Refer to AT90USB162 datasheet for details
            </summary>
        </member>
        <member name="M:HU320.HU320.timer_setOutputCompareRegisters(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Advanced - Set individual values of output compare registers. Refer to AT90USB162 datasheet for details
            </summary>
        </member>
        <member name="M:HU320.HU320.timer_setMasksAndFlags(System.Byte,System.Byte)">
            <summary>
            Advanced - Allows all functions of the timer subsystem to be configured. Refer to AT90USB162 datasheet for details
            </summary>
        </member>
        <member name="M:HU320.HU320.timer_clearTimerValue">
            <summary>
            sets the value of TCNT1 to zero
            </summary>
        </member>
        <member name="M:HU320.HU320.timer_setTimerValue(System.UInt16)">
            <summary>
            Sets a seed value into the timer register
            </summary>
            <param name="value">16bit seed value</param>
        </member>
        <member name="M:HU320.HU320.timer_getTimerValue">
            <summary>
            Reads the current value of TCNT1
            </summary>
            <returns>UInt16 value of TCNT0 and TCNT1</returns>
        </member>
        <member name="M:HU320.HU320.LCD_init">
            <summary>
            Initialises the LCD screen, this method must be called before the screen can be written to
            The LCD port is fixed on port D
            </summary>
        </member>
        <member name="M:HU320.HU320.LCD_clear">
            <summary>
            Clears the LCD screen and sets the cursor back to (0,0)
            </summary>
        </member>
        <member name="M:HU320.HU320.LCD_write(System.String)">
            <summary>
            Writes a string to the LCD, any text going over the end of the first line will wrap onto the second line
            </summary>
            <param name="s">The ASCII string to write to the display</param>
        </member>
        <member name="M:HU320.HU320.LCD_write(System.String,HU320.HU320.LCD_line,System.Int32)">
            <summary>
            Writes a string to the specified location on the LCD screen
            </summary>
            <param name="s">String to write to the LCD</param>
            <param name="line">Line number, 0 or 1</param>
            <param name="x_index">X-location on the screen (0 is far left)</param>
        </member>
        <member name="M:HU320.HU320.LCD_write(System.Byte[],HU320.HU320.LCD_line,System.Int32)">
            <summary>
            Writes a byte array to the specified location on the LCD screen
            </summary>
            <param name="dataToWrite">Bytes to write to the LCD</param>
            <param name="line">Line number, 0 or 1</param>
            <param name="x_index">X-location on the screen (0 is far left)</param>
        </member>
        <member name="M:HU320.HU320.LCD_write(System.Byte[])">
            <summary>
            Writes a byte array to the display, use this to specify a particular character set manually. The first character must define the line number
            </summary>
            <param name="dataToWrite">The byte array to write, specific to your LCD</param>
        </member>
        <member name="M:HU320.HU320.internal_getDeviceInfo">
            <summary>
            Gets the identification information contained in the attached IC
            </summary>
            <returns>A struct with the specified data</returns>
        </member>
        <member name="M:HU320.HU320.internal_genericMemoryWrite(System.Byte,System.Byte[])">
            <summary>
            Advanced - Writes an array of bytes to any memory register. Use with caution!
            </summary>
            <param name="address">8bit address of the memory location to begin writing from</param>
            <param name="data">data bytes to write to the given memory location, and the following locations (max 32)</param>
        </member>
        <member name="M:HU320.HU320.internal_genericMemoryRead(System.Byte,System.Int32,System.Byte[]@)">
            <summary>
            Advanced - Reads an array of bytes from any memory register
            </summary>
            <param name="address">8bit address of the memory location to begin reading from</param>
            <param name="data">data bytes read from the given memory location, and the following locations (max 32)</param>
        </member>
        <member name="M:HU320.HU320.EEPROM_write(System.Byte[],System.UInt16)">
            <summary>
            Writes data to the EEPROM. 512 bytes are available
            Maximum number of bytes to be written at a time is limited by the HID report size to 57 bytes
            </summary>
            <param name="bytesToWrite">The data bytes to write</param>
            <param name="address">The starting adress from which the bytes will be written. Valid 0-511</param>
        </member>
        <member name="M:HU320.HU320.EEPROM_read(System.UInt16,System.Int32)">
            <summary>
            Read data from the EEPROM. 512 bytes are available
            </summary>
            <param name="address">The starting adress from which the bytes will be read. Valid 0-511</param>
            <param name="numBytesToRead">The number of bytes required - max 255</param>
            <returns>Data read from the EEPROM</returns>
        </member>
        <member name="P:HU320.HU320.clockSpeed_Hz">
            <summary>
            The crystal frequency in use (default 8MHz) This value should only be changed along with with custom firmware
            </summary>
        </member>
        <member name="P:HU320.HU320.I2C_enabled">
            <summary>
            Returns true if the I2C transceiver has been enabled
            </summary>
        </member>
        <member name="T:HU320.HU320.HU320_USB_msg">
            <summary>
            Message structure:
                U8  Section
                U8  Instruction
                U16 Flags
                U8  Datalength
            </summary>
        </member>
        <member name="M:utilities.utilities.hexStringToByteArray(System.String)">
            <summary>
            Converts a hex string such as "01 02 03 04" to {0x01, 0x02, 0x04, 0x04}
            </summary>
        </member>
    </members>
</doc>
